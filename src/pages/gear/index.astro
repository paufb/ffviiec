---
import { gear } from '../../data/instances/gear';
import Layout from '../../layouts/Layout.astro';
import GearImage from '../../components/GearImage.astro';
import ReinforcementAbilityIcon from '../../components/ReinforcementAbilityIcon.astro';
import FiltersHeader from '../../components/FiltersHeader.astro';
---

<Layout title="Gear - FFVIIEC" highlightedRoute="Gear">
  <div class="flex flex-col gap-4 max-w-360 mx-auto">
    <FiltersHeader characterCheckboxClass="f-chr" />
    <div class="grid grid-cols-[repeat(auto-fit,minmax(min(300px,100%),1fr))] gap-4">
      {Object.values(gear).map((gear) => (
        <div class="g-etr" data-character={gear.character.name}>
          <a href={`/gear/${gear.id || gear.name}`}>
            <GearImage
              gear={gear}
              class="w-24 h-24"
              style={{
                transform: !gear.id ? undefined :
                           gear.character.name === 'Red XIII' ? 'scale(2) translate(8%, -5%)' :
                           'scale(2) translateY(23%)'
              }}
              hoverable
              clickable
            />
          </a>
          <div class="flex flex-col flex-1 py-1.5 overflow-hidden">
            <span class="whitespace-nowrap">{gear.name}</span>
            <div class="flex flex-1 gap-2 justify-between">
              <div class="flex flex-col gap-0.5 justify-end overflow-x-scroll">
                {gear.reinforcementAbilities.map((reinforcementAbility) => (
                  <div class="flex gap-2 items-center">
                    <ReinforcementAbilityIcon reinforcementAbility={reinforcementAbility} />
                    <span class="text-sm whitespace-nowrap">{reinforcementAbility.name}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout>

<style>
  .g-etr {
    display: flex;
    gap: .5rem;
    min-width: 0;
  }
</style>

<script>
  let selectedCharacters: string[] = [];
  document.querySelectorAll<HTMLInputElement>('.f-chr').forEach((checkbox) => checkbox.addEventListener('click', () => {
    if (checkbox.checked) {
      selectedCharacters.push(checkbox.value);
    } else {
      selectedCharacters = selectedCharacters.filter((value) => value !== checkbox.value);
    }
  }));
  document.querySelectorAll<HTMLInputElement>('.f-chr, .f-elt, .f-sgl').forEach((checkbox) => checkbox.addEventListener('click', () => {
    (checkbox.parentNode as HTMLLabelElement).classList.toggle('selected', checkbox.checked);
    document.querySelectorAll<HTMLDivElement>('.g-etr').forEach((gearEntry) => {
      if (selectedCharacters.length === 0) {
        gearEntry.removeAttribute('hidden');
        return;
      }
      const shouldWeaponBeSelected = (selectedCharacters.length <= 0 || selectedCharacters.includes(gearEntry.getAttribute('data-character')!));
      gearEntry.toggleAttribute('hidden', !shouldWeaponBeSelected);
    });
  }));
</script>
