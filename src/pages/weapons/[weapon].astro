---
import { Image } from 'astro:assets';
import { weapons } from '../../data/instances/weapons';
import Layout from '../../layouts/Layout.astro'
import AbilityIcons from '../../components/AbilityIcons.astro';
import ATBBar from '../../components/ATBBar.astro';
import CharacterDiamond from '../../components/CharacterDiamond.astro';
import OverboostStars from '../../components/OverboostStars.astro';
import ReinforcementAbilityAnchor from '../../components/ReinforcementAbilityAnchor.astro';
import WeaponImage from '../../components/WeaponImage.astro';
import hpIcon from '../../assets/_ui/icon/parameter/parameter_hp.png';
import pAtkIcon from '../../assets/_ui/icon/parameter/parameter_str.png';
import mAtkIcon from '../../assets/_ui/icon/parameter/parameter_int.png';
import pDefIcon from '../../assets/_ui/icon/parameter/parameter_def.png';
import mDefIcon from '../../assets/_ui/icon/parameter/parameter_res.png';
import healIcon from '../../assets/_ui/icon/parameter/parameter_heal.png';

export async function getStaticPaths() {
  return Object.values(weapons).map((weapon) => ({
    params: { weapon: weapon.id || weapon.name },
    props: { weapon }
  }));
}

const { weapon } = Astro.props;
const container = 'p-3 bg-[#051629] rounded-md border-3 border-[#193d62]';
const displayableOverboostLevels = [0, 1, 6, 10];
---

<Layout title={`${weapon.name} - FFVIIEC`} highlightedRoute="Weapons">
  <div class="flex flex-col gap-2 max-w-360 m-auto">
    <div class="flex flex-wrap justify-center gap-5">
      <div class={`${container} flex flex-1 min-w-68 text-lg`}>
        <div class="flex flex-1 flex-col gap-2">
          <div>
            <div class="flex">
              <CharacterDiamond character={weapon.character} class="w-20 h-auto" />
              <div class="flex flex-col text-2xl">
                {weapon.name}
                {displayableOverboostLevels.map((level) => (
                  <div
                    class="overboost-level-dependant flex flex-nowrap"
                    data-level={level}
                    { ...(level !== 10 ? { hidden: true } : undefined) }
                  >
                    <OverboostStars level={level} size="24px" />
                  </div>
                ))}
                <span class="text-xl">Lv. 120</span>
              </div>
            </div>
          </div>
          <div>
            <span class="text-[#95c7ff] text-2xl">Stats</span>
            <hr class="h-0.75 mt-1 mb-4 border-none bg-[#95c7ff]" />
            {[
              { icon: hpIcon, name: 'HP', getterFunc: undefined },
              { icon: pAtkIcon, name: 'PATK', getterFunc: weapon.getPAtk.bind(weapon) },
              { icon: mAtkIcon, name: 'MATK', getterFunc: weapon.getMAtk.bind(weapon) },
              { icon: pDefIcon, name: 'PDEF', getterFunc: undefined },
              { icon: mDefIcon, name: 'MDEF', getterFunc: undefined },
              { icon: healIcon, name: 'HEAL', getterFunc: weapon.getHeal.bind(weapon) },
            ].map((stat, index) => (
              <div class={`flex justify-between text-xl px-1.5 py-1 ${index % 2 === 0 ? 'bg-[#051f3f]' : undefined}`}>
                <div class="flex items-center gap-4 text-[#95c7ff]">
                  <Image
                    src={stat.icon}
                    alt={stat.name}
                    width={20}
                    height={20}
                    class="animate-imageload"
                  />
                  {stat.name}
                </div>
                {displayableOverboostLevels.map((level) => (
                  <span
                    class="overboost-level-dependant"
                    data-level={level}
                    set:html={stat.getterFunc?.(level) ?? '--'}
                    { ...(level !== 10 ? { hidden: true } : undefined) }
                  />
                ))}
              </div>
            ))}
          </div>
        </div>
      </div>
      <div class="flex flex-col gap-5">
        <WeaponImage weapon={weapon} size="large" />
        <div class="flex items-center justify-between gap-5">
          <button id="decrease-tier-button">
            <svg class="w-9 h-9" fill="#91a5bb" style="transform: scaleX(-1);" width="24" height="24" viewBox="0 0 24 24">
              <path d="M10.477 0h-8.977l12.024 12-12.024 12h8.977l12.023-12z"></path>
            </svg>
          </button>
          <div class="flex flex-1 items-center justify-center text-xl w-0 overflow-x-scroll bg-[#051629] border-3 border-[#193d62] rounded-lg h-12 whitespace-nowrap px-2">
            {displayableOverboostLevels.map((level) => (
              <span
                class="overboost-level-dependant min-w-0"
                data-level={level}
                { ...(level !== 10 ? { hidden: true } : undefined) }
              >
                {{
                  0: 'C. Ability Tier 1',
                  1: 'C. Ability Tier 2',
                  6: 'C. Ability Tier 3',
                  10: 'C. Ability Max. Tier'
                }[level]}
              </span>
            ))}
          </div>
          <button id="increase-tier-button">
            <svg class="w-9 h-9" fill="#91a5bb" width="24" height="24" viewBox="0 0 24 24">
              <path d="M10.477 0h-8.977l12.024 12-12.024 12h8.977l12.023-12z"></path>
            </svg>
          </button>
        </div>
        <div>
          <div class="flex flex-wrap items-center gap-x-2">
            *Stats shown at Lv. 120 and
            {displayableOverboostLevels.map((level) => (
              <div
                class="overboost-level-dependant flex flex-nowrap"
                data-level={level}
                { ...(level !== 10 ? { hidden: true } : undefined) }
              >
                <OverboostStars level={level} size="24px" />
              </div>
            ))}
            rarity.
          </div>
          <div>*Shown as a main weapon.</div>
        </div>
      </div>
      <div class={`${container} flex flex-1 min-w-68 text-lg`}>
        <div class="flex flex-1 flex-col gap-2">
          <div>
            <span class="text-[#95c7ff] text-2xl">C. Ability</span>
            <hr class="h-0.75 mt-1 mb-4 border-none bg-[#95c7ff]" />
            <div class={container}>
              <div class="flex gap-2">
                <AbilityIcons
                  commandAbility={weapon.commandAbility}
                  element={weapon.element}
                  size="3rem"
                />
                <div class="flex flex-col flex-1">
                  <span id="c-ability-name" class="text-xl items-start">{weapon.commandAbility.name}++</span>
                  <div class="flex justify-end">
                    <ATBBar cost={weapon.commandAbility.atbCost} />
                  </div>
                </div>
              </div>
              <hr class="h-0.5 my-1.5 border-none bg-[#2e435c]" />
              {displayableOverboostLevels.map((level) => (
                <span
                  class="overboost-level-dependant"
                  data-level={level}
                  set:html={weapon.getCAbilityDescription(level).replace(/\n/g, '<br />')}
                  { ...(level !== 10 ? { hidden: true } : undefined) }
                />
              ))}
            </div>
          </div>
          <div class="flex flex-col">
            <span class="text-[#95c7ff] text-2xl">R. Abilities</span>
            <hr class="h-0.75 mt-1 mb-4 border-none bg-[#95c7ff]" />
            <div class="flex flex-col gap-2">
              {weapon.reinforcementAbilities.map((reinforcementAbility) => (
                <ReinforcementAbilityAnchor reinforcementAbility={reinforcementAbility} />
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  #decrease-tier-button,
  #increase-tier-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 4rem;
    height: 4rem;
    background-color: #0e151b;
    border: 2px solid #3a526e;
    outline: 2px solid #3a526e;
    outline-offset: -7px;
    border-radius: .5rem;
    touch-action: manipulation;
    cursor: pointer;
    transition: scale 100ms;

    &:active {
      scale: .95;
    }

    &:hover {
      background-color: #19212f;
      border-color: #5574aa;
      outline-color: #5574aa;
    }
  }
</style>

<script>
  document.querySelector('#decrease-tier-button')!.addEventListener('click', () => changeTier('decrease'));
  document.querySelector('#increase-tier-button')!.addEventListener('click', () => changeTier('increase'));
  const displayableOverboostLevels = [0, 1, 6, 10];
  let currentOverboostLevel = 10;
  function changeTier(direction: 'increase' | 'decrease') {
    const offset = direction === 'increase' ? 1 : -1;
    const currentIndex = displayableOverboostLevels.indexOf(currentOverboostLevel);
    const nextIndex = (currentIndex + offset + displayableOverboostLevels.length) % displayableOverboostLevels.length;
    currentOverboostLevel = displayableOverboostLevels[nextIndex];
    document.querySelectorAll('.overboost-level-dependant').forEach((element) => parseInt(element.getAttribute('data-level')!) !== currentOverboostLevel ? element.setAttribute('hidden', '') : element.removeAttribute('hidden'));
    const cAbilityName = document.querySelector('#c-ability-name')!;
    cAbilityName.innerHTML = cAbilityName.textContent!.replace(/\++$/, '') + (currentOverboostLevel === 6 ? '+' : currentOverboostLevel === 10 ? '++' : '');
  }
</script>
