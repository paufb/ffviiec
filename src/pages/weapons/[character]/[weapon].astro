---
import { Image } from 'astro:assets';
import { weapons } from '../../../data/instances/weapons';
import Layout from '../../../layouts/Layout.astro'
import AbilityIcons from '../../../components/AbilityIcons.astro';
import ATBBar from '../../../components/ATBBar.astro';
import CharacterDiamond from '../../../components/CharacterDiamond.astro';
import ReinforcementAbilityIcon from '../../../components/ReinforcementAbilityIcon.astro';
import WeaponImage from '../../../components/WeaponImage.astro';
import hpIcon from '../../../assets/_ui/icon/parameter/parameter_hp.png';
import pAtkIcon from '../../../assets/_ui/icon/parameter/parameter_str.png';
import mAtkIcon from '../../../assets/_ui/icon/parameter/parameter_int.png';
import pDefIcon from '../../../assets/_ui/icon/parameter/parameter_def.png';
import mDefIcon from '../../../assets/_ui/icon/parameter/parameter_res.png';
import healIcon from '../../../assets/_ui/icon/parameter/parameter_heal.png';

export async function getStaticPaths() {
  return Object.values(weapons).map((weapon) => ({
    params: { character: weapon.character.path, weapon: weapon.id || weapon.name },
    props: { weapon }
  }));
}

const { weapon } = Astro.props;
const container = 'p-3 bg-[#051629] rounded-md border-3 border-[#193d62]';
---

<Layout title={`${weapon.name} - FFVIIEC`} highlightedRoute="Weapons">
  <div class="flex flex-col gap-2 max-w-360 m-auto">
    <div class="flex flex-wrap justify-center gap-5">
      <div class={`${container} flex flex-1 min-w-68 text-lg`}>
        <div class="flex flex-1 flex-col gap-2">
          <div>
            <div class="flex">
              <CharacterDiamond character={weapon.character} class="w-20 h-auto" />
              <div class="flex flex-col">
                {weapon.name}
                <div class="overboost-stars flex flex-nowrap">
                  {[...Array(5)].map((_, i) => (
                    <svg width="24px" height="24px" fill="#e3cdf9" viewBox="0 0 512 512" style="filter: 'drop-shadow(2px 0 0 black);">
                      <polygon points="512,207.9 315.1,207.9 256,11 196.9,207.9 0,207.9 157.5,316.2 98.5,503.3 256,404.8 413.5,503.3 354.5,316.2 "></polygon>
                    </svg>
                  ))}
                </div>
                Lv. 120
              </div>
            </div>
          </div>
          <div>
            <span class="text-[#95c7ff] text-2xl">Stats</span>
            <hr class="h-0.75 mt-1 mb-4 border-none bg-[#95c7ff]" />
            {[
              { icon: hpIcon, name: 'HP', value: null, id: null },
              { icon: pAtkIcon, name: 'PATK', value: weapon.getPAtk(10), id: 'weapon-patk' },
              { icon: mAtkIcon, name: 'MATK', value: weapon.getMAtk(10), id: 'weapon-matk' },
              { icon: pDefIcon, name: 'PDEF', value: null, id: null },
              { icon: mDefIcon, name: 'MDEF', value: null, id: null },
              { icon: healIcon, name: 'HEAL', value: weapon.getHeal(10), id: 'weapon-heal' },
            ].map((entry, index) => (
              <div class={`flex justify-between px-1.5 py-1 ${index % 2 === 0 ? 'bg-[#051f3f]' : ''}`}>
                <div class="flex items-center gap-2 text-[#95c7ff]">
                  <Image src={entry.icon} alt="HP" width={16} height={16} class="animate-imageload" />
                  {entry.name}
                </div>
                <span id={entry.id}>{entry.value ?? '--'}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
      <div class="flex flex-col gap-5">
        <WeaponImage weapon={weapon} size="large" />
        <div class="flex items-center justify-between gap-5">
          <button id="previous-tier-button" class="cursor-pointer flex items-center justify-center w-16 h-16 bg-[#0e151b] border-2 border-[#3a526e] outline-2 outline-[#3a526e] -outline-offset-7 rounded-lg transform active:scale-95 transition duration-100 hover:bg-[#19212f] hover:border-[#5574aa] hover:outline-[#5574aa]">
            <svg class="w-9 h-9" fill="#91a5bb" style="transform: scaleX(-1);" width="24" height="24" viewBox="0 0 24 24">
              <path d="M10.477 0h-8.977l12.024 12-12.024 12h8.977l12.023-12z"></path>
            </svg>
          </button>
          <div id="c-ability-tier-label" class="flex flex-1 items-center justify-center bg-[#051629] border-3 border-[#193d62] rounded-lg h-12 whitespace-nowrap overflow-x-scroll px-2">
            C. Ability Max. Tier
          </div>
          <button id="next-tier-button" class="cursor-pointer flex items-center justify-center w-16 h-16 bg-[#0e151b] border-2 border-[#3a526e] outline-2 outline-[#3a526e] -outline-offset-7 rounded-lg transform active:scale-95 transition duration-100 hover:bg-[#19212f] hover:border-[#5574aa] hover:outline-[#5574aa]">
            <svg class="w-9 h-9" fill="#91a5bb" width="24" height="24" viewBox="0 0 24 24">
              <path d="M10.477 0h-8.977l12.024 12-12.024 12h8.977l12.023-12z"></path>
            </svg>
          </button>
        </div>
        <div>
          <div class="flex flex-wrap items-center gap-x-2">
            *Stats shown at Lv. 120 and
            <div class="overboost-stars flex flex-nowrap">
              {[...Array(5)].map((_, i) => (
                <svg width="24px" height="24px" fill="#e3cdf9" viewBox="0 0 512 512" style="filter: 'drop-shadow(2px 0 0 black);">
                  <polygon points="512,207.9 315.1,207.9 256,11 196.9,207.9 0,207.9 157.5,316.2 98.5,503.3 256,404.8 413.5,503.3 354.5,316.2 "></polygon>
                </svg>
              ))}
            </div>
            rarity.
          </div>
          <div>*Shown as a main weapon.</div>
        </div>
      </div>
      <div class={`${container} flex flex-1 min-w-68 text-lg`}>
        <div class="flex flex-1 flex-col gap-2">
          <div>
            <span class="text-[#95c7ff] text-2xl">C. Ability</span>
            <hr class="h-0.75 mt-1 mb-4 border-none bg-[#95c7ff]" />
            <div class={container}>
              <div class="flex gap-2">
                <AbilityIcons commandAbility={weapon.commandAbility} element={weapon.element} />
                <div class="flex flex-col flex-1">
                  <span id="c-ability-name">{weapon.commandAbility.name}</span>
                  <div class="flex justify-end">
                    <ATBBar cost={weapon.commandAbility.atbCost} />
                  </div>
                </div>
              </div>
              <hr class="h-0.5 my-1.5 border-none bg-[#2e435c]" />
              <span id="c-ability-description" class="whitespace-pre-wrap">{weapon.getCAbilityDescription(10)}</span>
            </div>
          </div>
          <div class="flex flex-col">
            <span class="text-[#95c7ff] text-2xl">R. Abilities</span>
            <hr class="h-0.75 mt-1 mb-4 border-none bg-[#95c7ff]" />
            <div class="flex flex-col gap-2">
              {weapon.reinforcementAbilities.map((reinforcementAbility) => (
                <a
                  href={`/reinforcement-abilities/${reinforcementAbility.id}`}
                  class="flex gap-2 border-2 border-[#193d62] outline-2 outline-[#193d62] -outline-offset-7 rounded-lg p-3 hover:bg-[#0b203e] hover:border-[#2164ab] hover:outline-[#2164ab] transform active:scale-95 transition duration-100"
                >
                  <ReinforcementAbilityIcon reinforcementAbility={reinforcementAbility} width={40} height={40} />
                  {reinforcementAbility.name}
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script is:inline define:vars={{
  stats: {
    0: { pAtk: weapon.getPAtk(0), mAtk: weapon.getMAtk(0), heal: weapon.getHeal(0) },
    1: { pAtk: weapon.getPAtk(1), mAtk: weapon.getMAtk(1), heal: weapon.getHeal(1) },
    6: { pAtk: weapon.getPAtk(6), mAtk: weapon.getMAtk(6), heal: weapon.getHeal(6) },
    10: { pAtk: weapon.getPAtk(10), mAtk: weapon.getMAtk(10), heal: weapon.getHeal(10) },
  },
  cAbilityDescriptions: {
    0: weapon.getCAbilityDescription(0),
    1: weapon.getCAbilityDescription(1),
    6: weapon.getCAbilityDescription(6),
    10: weapon.getCAbilityDescription(10),
  }
}}>
  document.querySelector('#previous-tier-button').addEventListener('click', () => changeTier('decrease'));
  document.querySelector('#next-tier-button').addEventListener('click', () => changeTier('increase'));
  const displayableOverboostLevels = [0, 1, 6, 10];
  let currentOverboostLevel = 10;
  const labels = {
    0: 'C. Ability Tier 1',
    1: 'C. Ability Tier 2',
    6: 'C. Ability Tier 3',
    10: 'C. Ability Max. Tier'
  };
  function changeTier(direction) {
    const offset = direction === 'increase' ? 1 : -1;
    const currentIndex = displayableOverboostLevels.indexOf(currentOverboostLevel);
    const nextIndex = (currentIndex + offset + displayableOverboostLevels.length) % displayableOverboostLevels.length;
    currentOverboostLevel = displayableOverboostLevels[nextIndex];
    document.querySelector('#c-ability-tier-label').innerHTML = labels[currentOverboostLevel];
    document.querySelector('#c-ability-description').innerHTML = cAbilityDescriptions[currentOverboostLevel];
    document.querySelector('#weapon-patk').innerHTML = stats[currentOverboostLevel].pAtk;
    document.querySelector('#weapon-matk').innerHTML = stats[currentOverboostLevel].mAtk;
    document.querySelector('#weapon-heal').innerHTML = stats[currentOverboostLevel].heal;
    const cAbilityName = document.querySelector('#c-ability-name');
    cAbilityName.innerHTML = cAbilityName.textContent.replace(/\++$/, '') + (currentOverboostLevel === 6 ? '+' : currentOverboostLevel === 10 ? '++' : '');
    const GOLD = '#d39e24';
    const RED = '#ec373a';
    const PURPLE = '#e3cdf9';
    const NUMBER_OF_STARS = 5;
    let starColors = [];
    if (currentOverboostLevel <= NUMBER_OF_STARS) {
      for (let i = 0; i < currentOverboostLevel; i++) {
        starColors.push(RED);
      }
      for (let i = currentOverboostLevel; i < NUMBER_OF_STARS; i++) {
        starColors.push(GOLD);
      }
    } else {
      for (let i = 0; i < currentOverboostLevel - NUMBER_OF_STARS; i++) {
        starColors.push(PURPLE);
      }
      for (let i = currentOverboostLevel - NUMBER_OF_STARS; i < NUMBER_OF_STARS; i++) {
        starColors.push(RED);
      }
    }
    const svgArray = [...Array(NUMBER_OF_STARS)].map((_, i) => `<svg width="24px" height="24px" fill="${starColors[i]}" viewBox="0 0 512 512" style="filter: 'drop-shadow(2px 0 0 black);"><polygon points="512,207.9 315.1,207.9 256,11 196.9,207.9 0,207.9 157.5,316.2 98.5,503.3 256,404.8 413.5,503.3 354.5,316.2 "/></svg>`);
    document.querySelectorAll('.overboost-stars').forEach((element) => element.innerHTML = svgArray.join(''));
  }
</script>
